---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-staging
  namespace: kube-system
spec:
  acme:
    # The ACME server URL
    server: https://acme-staging-v02.api.letsencrypt.org/directory
    # Email address used for ACME registration
    email: operations@fervid.us
    # Name of a secret used to store the ACME account private key
    privateKeySecretRef:
      name: letsencrypt-staging
    solvers:
    - selector:
        dnsZones:
          - "fervid.us"
          - "rybamarine.com"
      dns01:
        route53:
          region: $(kubectl -n kube-system get secret aws-credentials -o=jsonpath='{.data.region}' | base64 --decode)
          accessKeyID: $(kubectl -n kube-system get secret aws-credentials -o=jsonpath='{.data.access_key_id}' | base64 --decode)
          secretAccessKeySecretRef:
            name: aws-credentials
            key: secret_access_key
          role: $(kubectl -n kube-system get secret aws-credentials -o=jsonpath='{.data.role}' | base64 --decode)

---
apiVersion: cert-manager.io/v1
kind: ClusterIssuer
metadata:
  name: letsencrypt-prod
  namespace: kube-system
spec:
  acme:
    # The ACME server URL
    server: https://acme-v02.api.letsencrypt.org/directory
    # Email address used for ACME registration
    email: operations@fervid.us
    # Name of a secret used to store the ACME account private key
    privateKeySecretRef:
      name: letsencrypt-prod
    solvers:
    - selector:
        dnsZones:
          - "fervid.us"
          - "rybamarine.com"
      dns01:
        route53:
          region: $(kubectl -n kube-system get secret aws-credentials -o=jsonpath='{.data.region}' | base64 --decode)
          accessKeyID: $(kubectl -n kube-system get secret aws-credentials -o=jsonpath='{.data.access_key_id}' | base64 --decode)
          secretAccessKeySecretRef:
            name: aws-credentials
            key: secret_access_key
          role: $(kubectl -n kube-system get secret aws-credentials -o=jsonpath='{.data.role}' | base64 --decode)
